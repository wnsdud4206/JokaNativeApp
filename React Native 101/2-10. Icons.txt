참고 - https://nomadcoders.co/react-native-for-beginners/lectures/3129



@expo/vector-icons
- https://docs.expo.dev/guides/icons/
- https://icons.expo.fyi/
expo init을 통해서 어플을 만들었다면 아이콘 패키지가 미리 설치되어 있을 것이다. @expo/vector-icons에서 받아온다. 우리가 할 건 사용할 아이콘 패밀리를 import하는 것 뿐이다. 그 다음 컴포넌트와 우리가 쓰려는 아이콘만 써주면 된다.
https://icons.expo.fyi/ 로 가면 어떤 아이콘들이 있는지 확인 할 수 있다. evil icons라는 아이콘 항목도 있고 아니면 Fontisto라는 것도 쓸 수 있다. Fontisto는 브랜드들이나 메일, 재활용표시 등이 있고 우리가 사용할 날씨 아이콘들도 여기에 있다.

이제 우리는 hashmap 같은 것을 만들 것이다. 우선 expo 아이콘 사이트에서 cloudy 라는 아이콘을 가져다 사용할 것이고 Fontisto를 import해야 사용할 수 있다.

ex) App.js
import React, { useEffect, useState } from "react";
import * as Location from "expo-location";
import {
  ScrollView,
  StyleSheet,
  Dimensions,
  Text,
  View,
  ActivityIndicator,
} from "react-native";
import { StatusBar } from "expo-status-bar";
import { Fontisto } from "@expo/vector-icons";

const { width: SCREEN_WIDTH } = Dimensions.get("window");

const API_KEY = "c3d64abd985a5e5d422ceeefa8ed7137";

const icons = {
  Clear: "day-sunny",
  Clouds: "cloudy",
  Rain: "rain",
  Atmosphere: "cloudy-gusts",
  Snow: "snow",
  Drizzle: "day-rain",
  Thunderstorm: "lightning",
  Haze: "day-haze",
};

export default function App() {
  const [city, setCity] = useState("Loading...");
  const [days, setDays] = useState([]);
  const [ok, setOk] = useState(true);
  const getWeather = async () => {
    const { granted } = await Location.requestForegroundPermissionsAsync();
    if (!granted) {
      setOk(false);
    }
    const {
      coords: { latitude, longitude },
      // } = await Location.getLastKnownPositionAsync({ accuracy: 5 });
    } = await Location.getCurrentPositionAsync({ accuracy: 5 });

    Location.setGoogleApiKey("AIzaSyBrCqiddDH1pUKIXy_KRD2gqEpqjxJ9SBY");
    const place = await Location.reverseGeocodeAsync(
      {
        latitude,
        longitude,
      },
      { useGoogleMaps: false },
    );
    setCity(place[0].city);
    const response = await fetch(
      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`,
    );
    const json = await response.json();
    console.log(json);
    setDays(json);
  };
  useEffect(() => {
    getWeather();
  }, []);

  return (
    <View style={styles.container}>
      <View style={styles.city}>
        <Text style={styles.cityName}>{city}</Text>
      </View>
      <ScrollView
        pagingEnabled
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.weather}
      >
        {days.length === 0 ? (
          <View style={{ ...styles.day, alignItems: "center" }}>
            <ActivityIndicator
              color="white"
              style={{ marginTop: 10 }}
              size="large"
            />
          </View>
        ) : (
          days.weather.map((day, index) => (
            <View key={index} style={styles.day}>
              <View style={styles.main}>
                <Text style={styles.temp}>
                  {parseFloat(days.main.temp).toFixed(1)}
                </Text>
                <Fontisto name={icons[day.main]} size={68} color="black" />
              </View>
              <Text style={styles.description}>{day.main}</Text>
              <Text style={styles.tinyText}>{day.description}</Text>
            </View>
          ))
        )}
      </ScrollView>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#1e83a4",
  },
  city: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  cityName: {
    fontSize: 68,
    fontWeight: "500",
  },
  weather: {
    // flex: 3,
    // backgroundColor: "#369bbc",
  },
  day: {
    width: SCREEN_WIDTH,
    alignItems: "flex-start",
    paddingHorizontal: 20,
  },
  main: {
    flexDirection: "row",
    alignItems: "center",
    width: "100%",
    justifyContent: "space-between",
  },
  temp: {
    marginTop: 50,
    fontWeight: "600",
    fontSize: 100,
  },
  description: {
    marginTop: -10,
    fontSize: 30,
    fontWeight: "500",
  },
  tinyText: {
    fontSize: 20,
  },
});



다음 강의에서는 todolist를 만들어 볼 것이다. input, reactnative에서 무언가를 적는 법, 키보드를 제어하는 법, 이벤트를 제어하는 법이나 react native로 데이터를 어떻게 저장하고 쓰는지도 배워볼 것이다.