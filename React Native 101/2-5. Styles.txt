참고 - https://nomadcoders.co/react-native-for-beginners/lectures/3124



이제 본격적으로 날씨앱을 만들어 볼 것이다. 우선 우리는 앱에서 우리가 있는 도시의 이름을 보여줄 것이다. 이 것은 Location Expo Package를 이용해서 위치를 가져올 것이다. 휴대폰의 지리적 위치를 가져오는 function은 아주 많이 있다. 위치를 가져온 다음에 해당되는 위치에서 16일간의 기상예보도 가져올 것이다. Expo를 사용해서 좌표를 얻어서 그 좌표를 이 날씨 API에게 보낼 것이다. 그럼 날씨 API는 우리가 있는 도시 이름과 일기예보 array를 건내줄 것이다. 기상예보의 name과 description, 온도, 습도도 보여줄 것이다.

우선 아래처럼 초기 세팅을 해준다.
ex) App.js
import React from "react";
import { View } from "react-native";

export default function App() {
  return <View style={{ flex: 1, backgroundColor: "powderblue" }}></View>;
}

일단 먼저 상태바의 색상을 밝게 해주고 싶다면 Expo의 StatusBar를 가져와 style="light"를 주면되지만 내 앱의 배경이 밝은 색이기 때문에 style="auto"로 줄 것이다. (StatusBar가 없으면 상태바의 검은 배경이 생김, 안드로이드가 그러는 듯)
ex) App.js
import React from "react";
import { Text, View } from "react-native";
import { StatusBar } from "expo-status-bar";

export default function App() {
  return (
    <View style={{ flex: 1, backgroundColor: "powderblue" }}>
      <Text>Hello</Text>
      <StatusBar style="light" />
    </View>
  );
}


그리고 styles를 만들어 줄 것이다. 왜냐하면 많은 Components를 만들 것이기 때문이다.
ex) App.js
import React from "react";
import { StyleSheet, View } from "react-native";
import { StatusBar } from "expo-status-bar";

export default function App() {
  return (
    <View style={styles.container}>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "powderblue",
  },
});

이제 또 우리가 할 것은 두 개의 Container를 만드는 것이다. 하나의 Container는 상단에 우리가 있는 도시 이름을 표시하기 위한 것이고 다른 하나는 기상 에보가 될 것이다.
* 저장을 하게 되면 앱에서도 Refreshed 팝업이 뜨면서 변경사항이 적용되는데 만약 이게 안된다면 터미널에서 r을 입력하면 된다.
StyleSheet.create를 이용해 style을 적용하고 임의로 날씨정보를 가져온 것처럼 적용시켜 볼 것이다.
* 구현할 때 style에 backgroundColor를 구분할 수 있는 색으로 해두면 웹에서 outline으로 크기가 어떻게 보이는지 알 수 있는 것처럼 확인할 수 있다.
ex) App.js
import React from "react";
import { StyleSheet, Text, View } from "react-native";
import { StatusBar } from "expo-status-bar";

export default function App() {
  return (
    <View style={styles.container}>
      <View style={styles.city}>
        <Text style={styles.cityName}>Seoul</Text>
      </View>
      <View style={styles.weather}>
        <View style={styles.day}>
          <Text style={styles.temp}>27</Text>
          <Text style={styles.description}>Sunny</Text>
        </View>
      </View>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#1e83a4",
  },
  city: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  cityName: {
    fontSize: 68,
    fontWeight: "500",
  },
  weather: {
    flex: 3,
    // backgroundColor: "#369bbc",
  },
  day: {
    flex: 1,
    alignItems: "center",
    // backgroundColor: "teal",
  },
  temp: {
    marginTop: 50,
    fontSize: 178,
  },
  description: {
    marginTop: -30,
    fontSize: 62,
  },
});

?? 왜 styles.weather인 View안에 styles.day인 View를 또 넣어줬을까?

나중엔 세로로 스크롤해서 볼 수 있게끔 할 것지만 일단 가로로 스크롤해서 볼 수 있도록 구현해보도록 할 것이다.